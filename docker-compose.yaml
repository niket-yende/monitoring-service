version: '3.7'

services:
  mongodb1:
    image: mongo:6-jammy
    command: mongod --replSet rs0 --auth --bind_ip_all --keyFile /data/replica.key
    container_name: mongodb1
    hostname: mongodb1
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
      - MONGO_INITDB_DATABASE=dbname
      - MONGO_REPLICA_SET_NAME=rs0
      - MONGO_SECONDARY_HOSTNAME=mongodb1
    volumes:
      - mongo1:/data/db
      - ./config/mongodb/replica.key.devel:/data/replica.key.devel
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
      - ./config/mongodb/rs-init.sh:/scripts/rs-init.sh
    links:
      - mongodb2
      - mongodb3
    entrypoint:
      - bash
      - -c
      - |
          chmod 777 /scripts/rs-init.sh
          cp /data/replica.key.devel /data/replica.key
          chmod 400 /data/replica.key
          chown 999:999 /data/replica.key
          exec docker-entrypoint.sh $$@ 
    ports:
      - "27097:27017"
    networks:
      monitor-network:
        ipv4_address: 172.29.0.2
  
  mongodb2:
    image: mongo:6-jammy
    command: mongod --replSet rs0 --auth --bind_ip_all --keyFile /data/replica.key
    container_name: mongodb2
    hostname: mongodb2
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
      - MONGO_REPLICA_SET_NAME=rs0
      - MONGO_SECONDARY_HOSTNAME=mongodb2
    volumes:
      - mongo2:/data/db
      - ./config/mongodb/replica.key.devel:/data/replica.key.devel
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    entrypoint:
      - bash
      - -c
      - |
          cp /data/replica.key.devel /data/replica.key
          chmod 400 /data/replica.key
          chown 999:999 /data/replica.key
          exec docker-entrypoint.sh $$@ 
    ports:
      - "27098:27017"
    networks:
      monitor-network:
        ipv4_address: 172.29.0.3

  mongodb3:
    image: mongo:6-jammy
    command: mongod --replSet rs0 --auth --bind_ip_all --keyFile /data/replica.key
    container_name: mongodb3
    hostname: mongodb3
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
      - MONGO_REPLICA_SET_NAME=rs0
      - MONGO_SECONDARY_HOSTNAME=mongodb3
    volumes:
      - mongo3:/data/db
      - ./config/mongodb/replica.key.devel:/data/replica.key.devel
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    entrypoint:
      - bash
      - -c
      - |
          cp /data/replica.key.devel /data/replica.key
          chmod 400 /data/replica.key
          chown 999:999 /data/replica.key
          exec docker-entrypoint.sh $$@ 
    ports:
      - "27099:27017"
    networks:
      monitor-network:
        ipv4_address: 172.29.0.4

  mongodb-exporter:
    image: percona/mongodb_exporter:2.35.0
    container_name: mongodb-exporter
    command: --mongodb.uri mongodb://exporter:password@mongodb1:27017/admin?replicaSet=rs0&ssl=false&tls=false
    ports:
      - "9216:9216"
    depends_on:
      - mongodb1
    networks:
      monitor-network:
        ipv4_address: 172.29.0.5
  
  prometheus:
    image: "prom/prometheus"
    container_name: prometheus
    ports:
      - 9090:9090/tcp
    volumes:
      - ./config/prometheus/:/etc/prometheus/
      - prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    links:
      - alertmanager
    networks:
      monitor-network:
        ipv4_address: 172.29.0.6

  grafana:
    image: "grafana/grafana"
    container_name: grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_USERS_VIEWERS_CAN_EDIT=true
    ports:
      - 3000:3000
    volumes:
      - ./config/grafana/provisioning/:/etc/grafana/provisioning/
      - grafana:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      monitor-network:
        ipv4_address: 172.29.0.7

  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    ports:
      - 9093:9093
    volumes:
      - "./config/alertmanager/:/etc/alertmanager/"
      - alertmanager-data:/data
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--log.level=debug'
    restart: unless-stopped
    networks:
      monitor-network:
        ipv4_address: 172.29.0.8
  
  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    restart: unless-stopped
    networks:
      monitor-network:
        ipv4_address: 172.29.0.9

  redis1:
    image: redis:6.2.6
    container_name: redis1
    hostname: redis1
    env_file: ./config/redis/.env
    ports:
      - 6379:6379
    command: /bin/sh -c "redis-server --port 6379 --cluster-enabled yes --cluster-config-file /data/nodes.conf --cluster-node-timeout 5000 --requirepass $$REDIS_PASSWORD"
    restart: unless-stopped
    volumes: 
      - cache1:/data
    networks:
      monitor-network:
        ipv4_address: 172.29.0.10

  redis2:
    image: redis:6.2.6
    container_name: redis2
    hostname: redis2
    env_file: ./config/redis/.env
    ports:
      - 6380:6379
    command: /bin/sh -c "redis-server --port 6380 --cluster-enabled yes --cluster-config-file /data/nodes.conf --cluster-node-timeout 5000 --requirepass $$REDIS_PASSWORD"
    restart: unless-stopped
    volumes: 
      - cache2:/data
    networks:
      monitor-network:
        ipv4_address: 172.29.0.11

  redis3:
    image: redis:6.2.6
    container_name: redis3
    hostname: redis3
    env_file: ./config/redis/.env
    ports:
      - 6381:6379
    command: /bin/sh -c "redis-server --port 6381 --cluster-enabled yes --cluster-config-file /data/nodes.conf --cluster-node-timeout 5000 --requirepass $$REDIS_PASSWORD"
    restart: unless-stopped
    volumes: 
      - cache3:/data
    networks:
      monitor-network:
        ipv4_address: 172.29.0.12

  redis-exporter:
    image: oliver006/redis_exporter:v1.20.0
    container_name: redis-exporter
    command:
      - '--redis.addr=redis://172.29.0.10:6379'
      - '--redis.password=eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81'
      - '--include-system-metrics'
    ports:
      - 9121:9121
    restart: unless-stopped
    depends_on:
      - redis1
    networks:
      monitor-network:
        ipv4_address: 172.29.0.13

  cadvisor:
    image: google/cadvisor:latest
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8090:8080/tcp
    networks:
      monitor-network:
        ipv4_address: 172.29.0.14
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
  
  blackbox-exporter:
    image: "prom/blackbox-exporter:latest"
    hostname: "blackbox"
    container_name: blackbox-exporter
    ports:
      - 9115:9115
    restart: unless-stopped
    volumes:
      - ./config/blackbox-exporter/blackbox-exporter.yml:/etc/prometheus/blackbox-exporter.yml
    command:
      - '--config.file=/etc/prometheus/blackbox-exporter.yml'
    networks:
      monitor-network:
        ipv4_address: 172.29.0.15

networks:
  monitor-network:
    name: monitor-network
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: 172.29.0.0/24

volumes:
  mongo1:
  mongo2:
  mongo3:
  prometheus:
  grafana:
  cache1:
  cache2:
  cache3:
  alertmanager-data: